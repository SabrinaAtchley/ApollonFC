#ifndef APOLLON_FC_SRC_SENSORS_MPU6050_H
#define APOLLON_FC_SRC_SENSORS_MPU6050_H

#include <Arduino.h>
#include "../sensor.h"


/* MPU6050 Sensor
 * Interfaces: I2C
 * Measures: 3-axis gyroscope, 3-axis accelerometer, internal temperature
 * Estimates: n/a
 * Datasheet: https://invensense.tdk.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf   - Product specifications
 *            https://cdn.sparkfun.com/datasheets/Sensors/Accelerometers/RM-MPU-6000A.pdf     - Register map
 */

enum : byte {
  MPU6050_REGISTER_SELF_TEST_X = 0x0D,
  MPU6050_REGISTER_SELF_TEST_Y = 0x0E,
  MPU6050_REGISTER_SELF_TEST_Z = 0x0F,
  MPU6050_REGISTER_SELF_TEST_A = 0x10,
  MPU6050_REGISTER_SAMPLE_RATE_DIVIDER = 0x19,
  MPU6050_REGISTER_CONFIG = 0x1A,
  MPU6050_REGISTER_GYRO_CONFIG = 0x1B,
  MPU6050_REGISTER_ACCEL_CONFIG = 0x1C,
  MPU6050_REGISTER_MOTION_THRESHOLD = 0x1F,
  MPU6050_REGISTER_FIFO_ENABLE = 0x23,
  MPU6050_REGISTER_I2C_MASTER_CTRL = 0x24,
  MPU6050_REGISTER_I2C_SLAVE0_ADDR = 0x25,
  MPU6050_REGISTER_I2C_SLAVE0_REGISTER = 0x26,
  MPU6050_REGISTER_I2C_SLAVE0_CTRL = 0x27,
  MPU6050_REGISTER_I2C_SLAVE1_ADDR = 0x28,
  MPU6050_REGISTER_I2C_SLAVE1_REGISTER = 0x29,
  MPU6050_REGISTER_I2C_SLAVE1_CTRL = 0x2A,
  MPU6050_REGISTER_I2C_SLAVE2_ADDR = 0x2B,
  MPU6050_REGISTER_I2C_SLAVE2_REGISTER = 0x2C,
  MPU6050_REGISTER_I2C_SLAVE2_CTRL = 0x2D,
  MPU6050_REGISTER_I2C_SLAVE3_ADDR = 0x2E,
  MPU6050_REGISTER_I2C_SLAVE3_REGISTER = 0x2F,
  MPU6050_REGISTER_I2C_SLAVE3_CTRL = 0x30,
  MPU6050_REGISTER_I2C_SLAVE4_ADDR = 0x31,
  MPU6050_REGISTER_I2C_SLAVE4_REGISTER = 0x32,
  MPU6050_REGISTER_I2C_SLAVE4_DATA_OUT = 0x33,
  MPU6050_REGISTER_I2C_SLAVE4_CTRL = 0x34,
  MPU6050_REGISTER_I2C_SLAVE4_DATA_IN = 0x35,
  MPU6050_REGISTER_I2C_MASTER_STATUS = 0x36,
  MPU6050_REGISTER_INTERRUPT_PIN_CONFIG = 0x37,
  MPU6050_REGISTER_INTERRUPT_ENABLE = 0x38,
  MPU6050_REGISTER_INTERRUPT_STATUS = 0x3A,
  MPU6050_REGISTER_ACCEL_XOUT_MSB = 0x3B,
  MPU6050_REGISTER_ACCEL_XOUT_LSB = 0x3C,
  MPU6050_REGISTER_ACCEL_YOUT_MSB = 0x3D,
  MPU6050_REGISTER_ACCEL_YOUT_LSB = 0x3E,
  MPU6050_REGISTER_ACCEL_ZOUT_MSB = 0x3F,
  MPU6050_REGISTER_ACCEL_ZOUT_LSB = 0x40,
  MPU6050_REGISTER_TEMPERATURE_MSB = 0x41,
  MPU6050_REGISTER_TEMPERATURE_LSB = 0x42,
  MPU6050_REGISTER_GYRO_XOUT_MSB = 0x43,
  MPU6050_REGISTER_GYRO_XOUT_LSB = 0x44,
  MPU6050_REGISTER_GYRO_YOUT_MSB = 0x45,
  MPU6050_REGISTER_GYRO_YOUT_LSB = 0x46,
  MPU6050_REGISTER_GYRO_ZOUT_MSB = 0x47,
  MPU6050_REGISTER_GYRO_ZOUT_LSB = 0x48,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_00 = 0x49,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_01 = 0x4A,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_02 = 0x4B,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_03 = 0x4C,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_04 = 0x4D,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_05 = 0x4E,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_06 = 0x4F,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_07 = 0x50,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_08 = 0x51,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_09 = 0x52,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_10 = 0x53,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_11 = 0x54,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_12 = 0x55,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_13 = 0x56,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_14 = 0x57,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_15 = 0x58,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_16 = 0x59,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_17 = 0x5A,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_18 = 0x5B,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_19 = 0x5C,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_20 = 0x5D,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_21 = 0x5E,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_22 = 0x5F,
  MPU6050_REGISTER_EXTERNAL_SENSOR_DATA_23 = 0x60,
  MPU6050_REGISTER_I2C_SLAVE0_DATA_OUT = 0x63,
  MPU6050_REGISTER_I2C_SLAVE1_DATA_OUT = 0x64,
  MPU6050_REGISTER_I2C_SLAVE2_DATA_OUT = 0x65,
  MPU6050_REGISTER_I2C_SLAVE3_DATA_OUT = 0x66,
  MPU6050_REGISTER_I2C_MASTER_DELAY_CTRL = 0x67,
  MPU6050_REGISTER_SIGNAL_PATH_RESET = 0x68,
  MPU6050_REGISTER_MOTION_DETECTION_CTRL = 0x69,
  MPU6050_REGISTER_USER_CTRL = 0x6A,
  MPU6050_REGISTER_POWER_MANAGEMENT_1 = 0x6B,
  MPU6050_REGISTER_POWER_MANAGEMENT_2 = 0x6C,
  MPU6050_REGISTER_FIFO_COUNT_MSB = 0x72,
  MPU6050_REGISTER_FIFO_COUNT_LSB = 0x73,
  MPU6050_REGISTER_FIFO_R_W = 0x74,
  MPU6050_REGISTER_WHO_AM_I = 0x75,
};

// Gyro FS_SEL bits [4:3] @ REGISTER_GYRO_CONFIG
typedef enum : byte {
  MPU6050_GYRO_SCALE_250 = 0x00,
  MPU6050_GYRO_SCALE_500 = 0x08,
  MPU6050_GYRO_SCALE_1000 = 0x10,
  MPU6050_GYRO_SCALE_2000 = 0x18,
} mpu6050_gyro_scale_t;

// Accel AFS_SEL bits [4:3] @ REGISTER_ACCEL_CONFIG
typedef enum : byte {
  MPU6050_ACCEL_SCALE_2G = 0x00,
  MPU6050_ACCEL_SCALE_4G = 0x08,
  MPU6050_ACCEL_SCALE_8G = 0x10,
  MPU6050_ACCEL_SCALE_16G = 0x18,
} mpu6050_accel_scale_t;

static constexpr int16_t gyro_self_test_min = -14;
static constexpr int16_t gyro_self_test_max = 14;
static constexpr int16_t accel_self_test_min = -14;
static constexpr int16_t accel_self_test_max = 14;

class Sensor_MPU6050 : I2C_Sensor {
private:
  byte status;

  mpu6050_gyro_scale_t gyroScale;
  mpu6050_accel_scale_t accelScale;

  // Checks DATA_RDY_INT in status byte (call readStatus() first!)
  bool isDataReady();

  // Functions used for calculating factory trims from test values
  inline float getAccelFT(const uint16_t &accel_test);
  inline float getGyroFT(const uint16_t &gyro_test);

public:
  struct { int16_t x, y, z; } accel; // Stored in 0.001g multiples
  int16_t temp;
  struct { int32_t x, y, z; } gyro; // Stored in 0.001Â°/s multiples



  Sensor_MPU6050(
    const bool useExternalSensors,
    const bool useFIFOBuffer,
    const bool useMotionDetection,
    const mpu6050_gyro_scale_t _gyroScale,
    const mpu6050_accel_scale_t _accelScale
  );

  bool update();

  /* Tests accelerometer and gyroscope
   * Returns a byte with bits [5:0] being self-test flags where 1 is a pass
   * bit   5     4     3     2     1     0
   *    accX  accY  accZ  gyrX  gyrY  gyrZ
   */
  byte selfTest();


};



#endif /* APOLLON_FC_SRC_SENSORS_MPU6050_H */
